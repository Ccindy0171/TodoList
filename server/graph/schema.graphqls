type Category {
  id: ID!
  name: String!
  color: String!
  createdAt: Time!
  updatedAt: Time!
}

input CategoryInput {
  name: String!
  color: String!
}

type Todo {
  id: ID!
  title: String!
  description: String
  completed: Boolean!
  categoryId: ID
  dueDate: Time!
  location: String
  priority: Int
  tags: [String!]
  createdAt: Time!
  updatedAt: Time!
}

type TodoOutput {
  id: ID!
  title: String!
  description: String
  completed: Boolean!
  category: Category
  dueDate: Time!
  location: String
  priority: Int
  tags: [String!]
  updatedAt: Time!
}

input TodoInput {
  title: String!
  description: String
  categoryId: ID
  dueDate: Time!
  location: String
  priority: Int
  tags: [String!]
}

input TodoFilter {
  completed: Boolean
  categoryId: ID
  startDate: Time
  endDate: Time
  updatedBefore: Time
  updatedAfter: Time
  priority: Int
  tags: [String!]
  noCategoryOnly: Boolean
}

type Query {
  todos(filter: TodoFilter): [TodoOutput!]!
  todo(id: ID!): TodoOutput
  categories: [Category!]!
  category(id: ID!): Category
}

type Mutation {
  createTodo(input: TodoInput!): TodoOutput!
  updateTodo(id: ID!, input: TodoInput!): TodoOutput!
  toggleTodo(id: ID!): TodoOutput!
  deleteTodo(id: ID!): Boolean!
  createCategory(input: CategoryInput!): Category!
  updateCategory(id: ID!, input: CategoryInput!): Category!
  deleteCategory(id: ID!): Boolean!
}

scalar Time 